// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  flashcards    Flashcard[]
  ratings       Rating[]
  schedule      Schedule[]
  exams         Exam[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Flashcard {
  id         String       @id @default(cuid())
  question   String
  answer     String       @default("")
  user       User         @relation(fields: [userId], references: [id])
  ratings    Rating[]
  schedule   Schedule[]
  exam       Exam         @relation(fields: [examId], references: [id])
  userId     String
  examId     String
  Attachment Attachment[]
}

model Rating {
  id           String    @id @default(cuid())
  flashcard    Flashcard @relation(fields: [flashcardId], references: [id])
  user         User      @relation(fields: [userId], references: [id])
  rating       String
  date_updated DateTime  @default(now())
  flashcardId  String
  userId       String
}

model Schedule {
  id          String    @id @default(cuid())
  flashcard   Flashcard @relation(fields: [flashcardId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  date_due    DateTime
  flashcardId String
  userId      String
}

model Exam {
  id         String      @id @default(cuid())
  name       String
  dueDate    DateTime
  flashcards Flashcard[]
  User       User?       @relation(fields: [userId], references: [id])
  userId     String?
}

model Attachment {
  id          String    @id @default(cuid())
  url         String
  name        String
  type        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  flashcard   Flashcard @relation(fields: [flashcardId], references: [id])
  flashcardId String
}
