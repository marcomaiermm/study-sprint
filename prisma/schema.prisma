// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  exams         Exam[]
  decks         Deck[]
  cards         Card[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Exam {
  id        String   @id @default(cuid())
  name      String
  date      DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  decks     Deck[]
}

model Deck {
  id        String   @id @default(cuid())
  name      String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  exam      Exam?    @relation(fields: [examId], references: [id], onDelete: Cascade)
  examId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cards     Card[]
}

model Card {
  id            String         @id @default(cuid())
  front         String
  back          String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  deck          Deck           @relation(fields: [deckId], references: [id], onDelete: Cascade)
  deckId        String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  cardSchedules CardSchedule[]
}

model CardSchedule {
  id         String   @id @default(cuid())
  card       Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  cardId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  nextReview DateTime
  interval   Int
}
